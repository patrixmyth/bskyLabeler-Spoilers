#!/usr/bin/env bash

# Source Credentials --- Note that this is not secure and will leak
# Goal is just to keep them off github
source .env
echo "$BLUESKY_HANDLE"
echo "$BLUESKY_APP_PASSWORD"

debug=1

log() {
    if [ "$debug" -eq 0 ]; then
        return
    else
    echo "$(date) [bsky_post_labeler]: $*"
    fi
}

log "Script started."

# Fetch the access JWT
log "Fetching access JWT."
auth=$(curl -X POST https://lepista.us-west.host.bsky.network/xrpc/com.atproto.server.createSession \
    -H "Content-Type: application/json" \
    -d "{\"identifier\": \"$BLUESKY_HANDLE\", \"password\": \"$BLUESKY_APP_PASSWORD\"}")

echo "$auth" >> auth.log

if [ -z "$auth" ]; then
    log "Failed to fetch accessJWT."
    exit 1
fi

accessJwt=$(echo "$auth" | jq -r '.accessJwt')
refreshJwt=$(echo "$auth" | jq -r '.refreshJwt')

if [ -z "$accessJwt" ] || [ -z "$refreshJwt" ]; then
    log "Failed to parse access or refresh JWT."
    exit 1
fi

log "Fetched and parsed access JWT."

function get_post_record() {
    DID=$1
    RKEY=$2

    curl "https://lepista.us-west.host.bsky.network/xrpc/com.atproto.repo.getRecord?repo=$DID&collection=app.bsky.feed.post&rkey=$RKEY" \
        -H 'content-type: application/json'

}

function create_label() {
    URI=$1
    CID=$2
    LBL=$3

    curl -v 'https://lepista.us-west.host.bsky.network/xrpc/tools.ozone.moderation.emitEvent' \
        -H 'accept: */*' \
        -H 'accept-language: en-US,en;q=0.9' \
        -H 'atproto-accept-labelers: did:plc:z3yk2cflhmn6vmzo3f5ixqh4;redact' \
        -H 'atproto-proxy: did:plc:z3yk2cflhmn6vmzo3f5ixqh4#atproto_labeler' \
        -H "authorization: Bearer $accessJwt" \
        -H 'content-type: application/json' \
        -H 'origin: https://ozone.yardcrow.com' \
        -H 'priority: u=1, i' \
        -H 'referer: https://ozone.yardcrow.com/' \
        --data-raw "{\"subject\":{\"\$type\":\"com.atproto.repo.strongRef\",\"uri\":\"$URI\",\"cid\":\"$CID\"},\"createdBy\":\"did:plc:z3yk2cflhmn6vmzo3f5ixqh4\",\"subjectBlobCids\":[],\"event\":{\"\$type\":\"tools.ozone.moderation.defs#modEventLabel\",\"createLabelVals\":[\"$LBL\"],\"negateLabelVals\":[]}}"
}


# Function to process each post
function process_post() {
    local json="$1"

    facet=$(echo "$json" | jq '.record | has("facets")')
    if [ "$facet" = "true" ]; then
        type=$(echo "$json" | jq '[.record.facets[].features[] | select(."$type" == "app.bsky.richtext.facet#tag")] | length > 0')
        if [ "$type" = "true" ]; then
            urls=$(echo "$json" | jq -r '
                .record.facets[]
                | .features[]
                | select(."$type" == "app.bsky.richtext.facet#tag")
                | .uri')

            # Check if any URIs match the specified domains
            found=0
            for url in $urls; do
                if echo "$url" | grep -E 'spoiler' > /dev/null; then
                    found=1
                    echo "$json" >> flagged_posts.json
                    rkey=$(echo "$json" | jq -r '.rkey')
                    did=$(echo "$json" | jq -r '.did')
                    link=$(echo "$json" | jq -r '"at://" + .did + "/app.bsky.feed.post/" + .rkey')
                    cid=$(get_post_record "$did" "$rkey" | jq -r '.cid')

                    log "Spoiler tag $url found at $link with CID $cid."

                    echo "Spoiler tag $url found at $link with CID $cid." >> flagged_post.log

                    if [ -z "$cid" ]; then
                        log "CID is empty, continuing."
                        continue
                    else

                    # Create a label
                    response=$(create_label "$link" "$cid" "auto-spoiler")
                    log "Label creation response: $response"
                    echo "$response" >> log.json
                    error=$(echo "$response" | jq -r '.error')

                    if [ "$error" = "ExpiredToken" ]; then
                        log "Token expired, refreshing tokens."

                        # Refresh the tokens
                        auth=$(curl -s -X POST 'https://lepista.us-west.host.bsky.network/xrpc/com.atproto.server.refreshSession' \
                            -H "Content-Type: application/json" \
                            -H "Authorization: Bearer $refreshJwt")

                        # Update tokens
                        accessJwt=$(echo "$auth" | jq -r '.accessJwt')
                        refreshJwt=$(echo "$auth" | jq -r '.refreshJwt')

                        response=$(create_label "$link" "$cid")
                        log "Label creation response after token refresh: $response"
                        echo "$response" >> log.json
                    fi
                    fi
                fi
            done

            if [ $found -eq 0 ]; then
                log "No spoiler links found."
            fi
        fi
    fi

}

# Stream records and process each one
websocat ws://127.0.0.1:6008/subscribe?wantedCollections=app.bsky.feed.post | while read -r post; do
    process_post "$post"
    did=$(echo "$json" | jq -r '.did') >> did.json
done




